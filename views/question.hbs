<!DOCTYPE html>
<html>
<head>
    <title>Fill in the Blank Quiz</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-50">
    <!-- Fixed Progress Bar -->
    <div class="fixed top-0 left-0 right-0 bg-white shadow-sm border-b border-gray-200 z-50">
      <div class="max-w-4xl mx-auto px-4">
        <div class="py-2">
          <div class="flex items-center justify-center mb-1">
            <span class="text-sm font-medium text-gray-600" id="progress-text">0 of 0 answers completed</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-1.5">
            <div class="bg-blue-600 h-1.5 rounded-full transition-all duration-500" id="progress-bar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add padding to main content to account for fixed header -->
    <div class="min-h-screen p-4 md:p-6 pt-16">
      <div class="max-w-4xl mx-auto">
        <!-- Main Content Card -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200">
          <!-- Toolbar -->
          <div class="p-4 bg-gray-50 border-b border-gray-200 rounded-t-xl">
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <button onclick="clearAllAnswers()" 
                      class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                üóëÔ∏è Clear All
              </button>
              <button onclick="copyContent()"
                      class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                üìã Copy Content
              </button>
              <button onclick="confirmFillAnswers()"
                      class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                üí° Show Answers
              </button>
            </div>
          </div>

          <!-- Content -->
          <div class="p-6" id="questions-container"></div>
        </div>

        <!-- Encouragement Toast -->
        <div id="encouragement-toast" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg border border-gray-200 p-4 transform translate-y-full opacity-0 transition-all duration-500">
          <p class="text-gray-800 font-medium"></p>
        </div>
      </div>
    </div>

    <style>
      /* Update input styling */
      .blank-input {
        @apply px-2 py-1 mx-1 text-blue-600 font-medium bg-transparent rounded-none transition-all duration-200 text-center;
        border: none;
        border-bottom: 2px solid #e5e7eb;
        min-width: 80px;
        font-size: 1.125em;
      }
      
      .blank-input:focus {
        @apply outline-none relative;
        border-bottom: 2px solid #3b82f6;
        z-index: 40;  /* Below progress bar but above other content */
      }
      
      .blank-input.correct {
        @apply text-green-600;
        border-bottom: 2px solid #22c55e;
        background: linear-gradient(180deg, transparent 65%, #dcfce7 35%);
      }
      
      .blank-input.incorrect {
        @apply text-red-600;
        border-bottom: 2px solid #ef4444;
        background: linear-gradient(180deg, transparent 65%, #fee2e2 35%);
      }

      /* Update reveal answer button styling */
      .answer-button {
        @apply inline-flex items-center text-xs px-1
               transition-all duration-200;
        background: none;
        border: none;
        font-size: 0.9rem;
        opacity: 0.8;
        margin-left: 0;
        vertical-align: middle;
        color: #3b82f6;  /* Blue-500 */
      }

      .answer-button:hover {
        opacity: 1;
        filter: brightness(1.2);
      }

      .answer-buttons-container {
        @apply inline;
        margin: 0;
        white-space: nowrap;
      }

      .question-row {
        @apply relative py-2 px-4 rounded-lg transition-all duration-200;
        line-height: 1.8;
        font-size: 1.125em;
      }

      .question-row li {
        @apply leading-relaxed;
        font-size: inherit;
      }

      .question-row:hover {
        @apply bg-blue-50/30;
      }

      /* Update headers */
      h1 { @apply text-3xl font-bold mb-8 mt-8 text-gray-900 !important; }
      h2 { @apply text-2xl font-bold mb-6 mt-6 text-gray-800 !important; }
      h3 { @apply text-xl font-bold mb-4 mt-4 text-gray-700 !important; }

      .hint {
        @apply text-gray-500 text-sm italic;
      }

      .answer-buttons-container:empty {
        display: none;
      }

      /* Animation for correct answers */
      @keyframes celebrate {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
      }

      .celebrate {
        animation: celebrate 0.5s ease-in-out;
      }

      /* Ensure content stays below fixed header when scrolling */
      #questions-container {
        position: relative;
        z-index: 30;
      }

      /* Update section styling */
      .section-wrapper {
        @apply border border-gray-200 rounded-lg overflow-hidden;
      }

      .section-header {
        @apply flex items-center justify-between cursor-pointer p-4 transition-colors duration-200;
      }

      .section-header h2 {
        @apply m-0 !important;
      }

      .section-content {
        @apply overflow-hidden transition-all duration-300;
        border-top: 1px solid #e5e7eb;
      }

      .section-content.collapsed {
        @apply h-0 p-0 border-t-0;
      }

      .toggle-icon {
        @apply text-gray-400 transition-transform duration-300 text-xl;
      }

      .collapsed .toggle-icon {
        @apply rotate-180;
      }
    </style>

    <script>
      const questionData = {
        questions: {{{json question.questions}}},
        content: {{{json question.content}}}
      };
      
      console.log('Question Data:', questionData);

      function renderMarkdown(text) {
        // First wrap sections in collapsible divs
        const sections = [
          'Scripture',
          'Main Points',
          'Fill in the Blank',
          'Summary',
          'Questions',
          'Going Deeper'
        ];
        
        // First handle the title separately (don't make it collapsible)
        text = text.replace(/^# (.+)$/m, '<h1 class="text-3xl font-bold mb-6 mt-8">$1</h1>');
        
        // Then handle sections
        sections.forEach(section => {
          const sectionRegex = new RegExp(`^## ${section}[\\s\\S]*?(?=^## |$)`, 'm');
          text = text.replace(sectionRegex, (match) => {
            const sectionId = section.toLowerCase().replace(/\s+/g, '-');
            // Process the section content first
            let sectionContent = match.replace(/^## [^\n]*\n/, ''); // Remove the section header
            
            // Process the content markdown
            sectionContent = sectionContent
              // Handle bold text
              .replace(/\*\*(.+?)\*\*/g, '<strong class="font-bold">$1</strong>')
              // Handle bullet points
              .replace(/^-\s+(.+)$/gm, (m, content) => 
                `<div class="question-row"><li class="text-base leading-relaxed">${content}</li></div>`)
              .replace(/(<div class="question-row"><li.*?<\/li><\/div>\n?)+/g, 
                '<ul class="list-disc pl-6 my-2 space-y-1">$&</ul>');

            return `
              <div class="section-wrapper mb-4">
                <div class="section-header bg-gray-50 hover:bg-gray-100" onclick="toggleSection('${sectionId}')">
                  <h2 class="text-xl font-bold">${section}</h2>
                  <span class="toggle-icon">‚ñº</span>
                </div>
                <div id="${sectionId}" class="section-content p-4">
                  ${sectionContent}
                </div>
              </div>
            `;
          });
        });

        return text;
      }

      // Add debounce function
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      function initializeQuiz() {
        const container = document.getElementById('questions-container');
        if (!container) return;
        
        let content = questionData.content;
        if (!content) {
          container.innerHTML = '<p class="text-red-500">No content available</p>';
          return;
        }
        
        content = renderMarkdown(content);
        
        // Create a map to track number of blanks per line
        const buttonsByLine = new Map();
        let currentLineStart = 0;
        
        questionData.questions.forEach((q, index) => {
          const answerLength = q.answer.length;
          const minWidth = Math.max(80, (answerLength * 10) + 20); // Match the adjustment logic
          
          // Find position of this #blank
          const blankPos = content.indexOf('#blank', currentLineStart);
          if (blankPos === -1) return;
          
          // Get the line containing this blank
          const lineStart = content.lastIndexOf('\n', blankPos) + 1;
          const lineEnd = content.indexOf('\n', blankPos);
          const lineId = lineStart;
          
          // Store button HTML by line ID
          const buttonHtml = `<button class="answer-button"
            id="show-answer-${q.blankIndex}" 
            onclick="toggleAnswer(${q.blankIndex})"
            title="Show answer"
          >üí°</button>`;
          
          if (!buttonsByLine.has(lineId)) {
            buttonsByLine.set(lineId, []);
          }
          buttonsByLine.get(lineId).push(buttonHtml);
          
          const inputHtml = `<input type="text" 
            class="blank-input" 
            data-blank-index="${q.blankIndex}" 
            data-line="${lineId}"
            oninput="handleInput(${q.blankIndex})" 
            style="width: ${minWidth}px">`;
          
          content = content.replace('#blank', `${inputHtml}<span class="answer-buttons-container">${buttonHtml}</span>`);
          currentLineStart = blankPos + 1;
        });

        container.innerHTML = content;
        updateProgress();

        // After content is rendered, initialize sections
        const sections = document.querySelectorAll('.section-content');
        sections.forEach(section => {
          // Start with sections expanded
          section.style.height = section.scrollHeight + 'px';
          section.classList.remove('collapsed');
        });
      }

      // Update the adjustInputWidth function to maintain minimum width based on answer length
      function adjustInputWidth(input) {
        const index = input.dataset.blankIndex;
        const correctAnswer = questionData.questions[index].answer;
        const answerLength = correctAnswer.length;
        const minWidth = Math.max(80, (answerLength * 10) + 20); // Base minimum on answer length
        const contentWidth = input.value.length * 10;
        
        // Use the larger of the two widths
        input.style.width = Math.max(minWidth, contentWidth) + 'px';
      }

      // Update handleInput to include width adjustment
      const handleInput = debounce((index) => {
        const input = document.querySelector(`[data-blank-index="${index}"]`);
        const showAnswerBtn = document.getElementById(`show-answer-${index}`);
        
        adjustInputWidth(input);
        
        if (!input.value.trim()) {
          input.classList.remove('correct', 'incorrect');
          showAnswerBtn.style.display = 'none';
          updateButtonsContainer(showAnswerBtn);
          return;
        }
        
        const userAnswer = input.value.trim().toLowerCase();
        const correctAnswer = questionData.questions[index].answer.toLowerCase();
        const isCorrect = userAnswer === correctAnswer;

        input.classList.remove('correct', 'incorrect');
        input.classList.add(isCorrect ? 'correct' : 'incorrect');
        
        showAnswerBtn.style.display = isCorrect ? 'none' : 'inline';
        updateButtonsContainer(showAnswerBtn);
        updateProgress();
      }, 500);

      // Add new helper function
      function updateButtonsContainer(button) {
        const container = button.closest('.answer-buttons-container');
        if (!container) return;
        
        // Check if all buttons in container are hidden
        const visibleButtons = Array.from(container.children)
          .filter(btn => btn.style.display !== 'none');
          
        container.style.display = visibleButtons.length > 0 ? '' : 'none';
      }

      // Update toggleAnswer to show checkmark when showing answer
      function toggleAnswer(index) {
        const input = document.querySelector(`[data-blank-index="${index}"]`);
        const button = document.getElementById(`show-answer-${index}`);
        
        if (!input || !button) return;
        
        input.value = questionData.questions[index].answer;
        input.classList.remove('incorrect');
        input.classList.add('correct');
        
        button.style.display = 'none';
        updateButtonsContainer(button);
      }

      function clearAllAnswers() {
        if (confirm('Are you sure you want to clear all answers?')) {
          const inputs = document.querySelectorAll('.blank-input');
          inputs.forEach(input => {
            input.value = '';
            input.classList.remove('correct', 'incorrect');
            const index = input.dataset.blankIndex;
            const showAnswerBtn = document.getElementById(`show-answer-${index}`);
            if (showAnswerBtn) {
              showAnswerBtn.style.display = 'none';
              updateButtonsContainer(showAnswerBtn);
            }
          });
        }
      }

      function copyContent() {
        const container = document.getElementById('questions-container');
        
        // Create a clone of the content to modify
        const clone = container.cloneNode(true);
        
        // Remove all buttons
        clone.querySelectorAll('button').forEach(btn => btn.remove());
        
        // Replace inputs with their values or underscores
        clone.querySelectorAll('.blank-input').forEach(input => {
          const text = input.value.trim() || '_____';
          const textNode = document.createTextNode(text);
          input.replaceWith(textNode);
        });
        
        // Get text content and clean up extra whitespace
        let content = clone.innerHTML
          .replace(/<br\s*\/?>/gi, '\n')  // Convert <br> to newlines
          .replace(/<li>/g, '- ')  // Replace <li> with bullet points
          .replace(/<\/li>/g, '')  // Remove closing li tags
          .replace(/<\/?[^>]+(>|$)/g, '')  // Remove remaining HTML tags
          .replace(/&nbsp;/g, ' ')  // Replace &nbsp; with spaces
          .replace(/\n\s*\n/g, '\n\n')  // Remove extra blank lines
          .trim();
        
        // Copy to clipboard
        navigator.clipboard.writeText(content)
          .then(() => alert('Content copied to clipboard!'))
          .catch(err => console.error('Failed to copy content:', err));
      }

      function confirmFillAnswers() {
        const messages = [
          "Are you sure you want to see all the answers? Remember, wrestling with these questions helps us grow in our understanding! ü§î",
          "God often works through our struggles and contemplation. Press CANCEL to spend a bit more time with these questions first. üôè",
          "The journey of discovery is where transformation happens! But if you really need the answers, click OK. ‚ù§Ô∏è"
        ];

        let currentDialog = 0;
        
        function showNextDialog() {
          if (currentDialog < messages.length) {
            if (!confirm(messages[currentDialog])) {
              return; // User clicked Cancel
            }
            currentDialog++;
            showNextDialog();
          } else {
            fillAllAnswers(); // All dialogs confirmed
          }
        }

        showNextDialog();
      }

      function fillAllAnswers() {
        questionData.questions.forEach((q, index) => {
          const input = document.querySelector(`[data-blank-index="${index}"]`);
          const showAnswerBtn = document.getElementById(`show-answer-${index}`);
          
          if (input) {
            input.value = q.answer;
            input.classList.remove('incorrect');
            input.classList.add('correct');
            if (showAnswerBtn) {
              showAnswerBtn.style.display = 'none';
              updateButtonsContainer(showAnswerBtn);
            }
          }
        });
      }

      function updateProgress() {
        const inputs = document.querySelectorAll('.blank-input');
        const correctInputs = document.querySelectorAll('.blank-input.correct');
        
        const total = inputs.length;
        const completed = correctInputs.length;
        const percentage = Math.round((completed / total) * 100);

        document.getElementById('progress-bar').style.width = `${percentage}%`;
        document.getElementById('progress-text').textContent = `${completed} of ${total} completed`;

        // Show encouragement messages at certain milestones
        if (completed > 0 && completed % 5 === 0) {
          showEncouragement(completed, total);
        }
      }

      function showEncouragement(completed, total) {
        const messages = [
          "Keep going! üåü",
          "You're doing great! üéâ",
          "Excellent progress! ‚ú®",
          "Keep seeking! üôè",
          "Well done! üí´"
        ];

        const toast = document.getElementById('encouragement-toast');
        toast.querySelector('p').textContent = messages[Math.floor(Math.random() * messages.length)];
        
        toast.classList.remove('translate-y-full', 'opacity-0');
        setTimeout(() => {
          toast.classList.add('translate-y-full', 'opacity-0');
        }, 3000);
      }

      // Update the toggle function to be more robust
      function toggleSection(sectionId) {
        const content = document.getElementById(sectionId);
        if (!content) return;
        
        const header = content.previousElementSibling;
        const wrapper = content.parentElement;
        
        if (content.classList.contains('collapsed')) {
          content.style.height = content.scrollHeight + 'px';
          content.classList.remove('collapsed');
          header.classList.remove('collapsed');
        } else {
          content.style.height = content.scrollHeight + 'px';
          // Force a reflow
          content.offsetHeight;
          content.style.height = '0px';
          content.classList.add('collapsed');
          header.classList.add('collapsed');
        }
      }

      // Add resize handler for dynamic content
      window.addEventListener('resize', debounce(() => {
        const openSections = document.querySelectorAll('.section-content:not(.collapsed)');
        openSections.forEach(section => {
          section.style.height = section.scrollHeight + 'px';
        });
      }, 250));

      // Initialize when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        initializeQuiz();
      });
    </script>
</body>
</html> 